"
"All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
" set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
" if has("autocmd")
"  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
"    \| exe "normal! g'\"" | endif
" endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

call pathogen#infect()
call pathogen#helptags()

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" definition de la touche "leader"
let mapleader = ","


" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
"set noignorecase	" case sensitive search
set autowrite		" Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes) in terminals

"ajouts personnels
set autoindent		"si ca c'est pas explicite...
set nu			"numéroter les lignes: :set nonu dans vim pour les masquer.
set ts=4		"tabstop: largeur des tabulations: 4 espaces
set sw=4		"shiftwidth: largeur de l'auto-indentation (mettre la même que tabstop)
set scrolloff=3	"keep 3 lines visible over and below the cursor

set autoread	" lire automatiquement si fichier modifié par l'exterieur
" autoread un peu merdique (quasiment jamais appelé): forcer un peu les checks
au BufEnter,CursorMoved,CursorHold,InsertEnter * checktime

set laststatus=2	"barre d'etat: 0 jamais, 1 si plusieurs fenetre, 2 toujours
" Format the statusline
" set statusline=%F%m\ %r\ Line:%l\/%L,%c\ %p%%
set statusline=%F%m%r%h%w\ [Format=%{&ff}]\ [FileType=%Y]\ %=[Pos=%01.4l,%01.4v]\ [%p%%]\ [Lines=%L]

set infercase 		"case sensitive autocompletion (crtl-d)
set wildmenu		"menu pour la completion
set wildmode=longest,list

"correction orthographique lors d'edition de fichiers .tex
 augroup filetypedetect
 au BufNewFile,BufRead *.tex setlocal spell "spelllang=fr
 augroup END

" Don't redraw while executing macros (good performance config)
set lazyredraw
 
" surligner en rouge hideux les dépassements de 80 caracteres
" pour les types voulus seulement
" augroup filetypedetect
" 	au BufWinEnter *.m let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.py let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.r let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.R let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.h let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.c let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.cpp let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.nc let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.java let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" augroup END

" redefinition du SpellBad (erreur d'orthographe/syntaxe)
highlight SpellBad term=underline cterm=underline ctermbg=none
"augroup filetypedetect
"au BufWinEnter *.py highlight SpellBad term=underline cterm=underline ctermbg=none
"augroup END

" assez explicite...
" TODO: adapter au type de fichier
" definir foldmethod=syntax pour langages à balises
" setlocal foldmethod=indent
" nombre de colonnes sur le coté mettant en évidence les folds
" setlocal foldmethod=syntax
set foldcolumn=4


" ctags: gère les tags dans les fichiers (pour autocompletion)
" TagExplorer permet d'explorer les fichiers et de lister les tags
" F8 affectee à l'ouverture de l'explorateur
nnoremap <silent> <F8> :TagExplorer<CR>
let TE_WinWidth = 30
" localisation du binaire ctags
let TE_Ctags_Path = '/usr/bin/ctags'
" pour ne prendre en compte que certains types de fichiers:
" let TE_Include_File_Pattern = '.*\.c$\|.*\.h$' 
" pour ne pas prendre en compte certains types de fichiers:
" let TE_Exclude_File_Pattern = '.*\.o$\|.*\.obj$\|.*\.bak$' .
"                                             '\|.*\.swp$\|core\|tags' 

" sauver les parametres de "vue" d'un fichier (folds manuels, filetype...)
" au BufWinLeave * silent mkview
" au BufWinEnter * silent loadview

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AUTOCOMPLETION
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" supertab permet la completion avec la touche tab: la touche œ est
" remappée vers le caractère tab en mode insert, et tout le monde est content
inoremap § <tab>
" laisser supertab décider du type d'autocompletion:
"let g:SuperTabDefaultCompletionType = "context"
"let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
"set ofu=syntaxcomplete#Complete 	" pour permettre "omnicompletion" (en fonction du language)
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType python let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

autocmd FileType java let g:SuperTabDefaultCompletionType = "<c-x><c-u>"

" autocmd FileType java setlocal completefunc=javacomplete#CompleteParamsInfo 
" autocmd FileType java setlocal omnifunc=javacomplete#Complete
" autocmd FileType java let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

set completeopt=longest,menuone ",preview		" plutot que de completer tout le mot, ne complete que la plus longue chaine commune
											" menu s'affiche même si que 1 proposition
											" documentation si dispo
" selection d'une proposition par entrée:
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" syntaxe nesc
augroup filetypedetect
  au! BufRead,BufNewFile *.nc setfiletype nc
augroup END

" utiliser le folding par marqueurs pour les fichiers tex
" augroup filetypedetect
" 	au BufRead,BufNewFile *.tex set foldmethod=marker
" augroup END

" utiliser un faux syntaxfold pour java
" augroup filetypedetect
" 	au BufRead,BufNewFile *.java set foldmethod=marker foldmarker={,}
" augroup END

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" meilleurs folds java{{{
" Javadoc comments (/** and */ pairs) and code sections (marked by {} pairs) mark the start and end of folds. All other
" lines simply take the fold level that is going so far.
function! JavaFold( lineNumber )
  let thisLine = getline( a:lineNumber )
  " permet les choses du style /*package*/ blabla {
  if ( thisLine =~ '\%(^\s*/\*.*\*/.*{\)' )
    return "a1"
  " If the entire Javadoc comment or the {} pair is on one line, then don't create a fold for it.
  " if ( thisLine =~ '\%(\%(/\*\*\).*\%(\*/\)\)\|\%({.*}\)' )
  elseif ( thisLine =~ '\%(\%(/\*\).*\%(\*/\)\)\|\%({.*}\)' )
    return '='
  " Si les accolades sont situées dans un commentaire monoligne, pas de fold
  " rappel: pour de l'aide sur les expression régulières, :help regexp
  elseif ( thisLine =~ '\%(\%(//\).*\%({\|}\)\)')
	  return '='
  elseif ( thisLine =~ '\%(//\)')
	  return '='
  " de même pour le multiligne
  elseif ( thisLine =~ '\%(\%(\%(^\s*/\*\)\|\%(^\s*\*\)\).*\%({\|}\)\)')
	  return '='
	  " ne rien faire si ferme et ouvre sur la même ligne (par exemple sur un
	  " else. cree des bugs)
  elseif ( thisLine =~ '\%(}.*{\)' )
	  return '='
  " modification: diminuer le niveau avant de le monter + possibilite de
  " fermer un multiligne à la fin d'une ligne (par ex, pour le GPL statement)
  " elseif ( thisLine =~ '\%(^\s*\*/\s*$\)\|}' )
  elseif ( thisLine =~ '\%(\*/\s*$\)\|}' )
    return "s1"
  " modification (pour pouvoir lire des fichiers porcins): on autorise le fold
  " des javadocs avec du texte sur la premiere ligne, et on permet aussi le
  " fold des commentaires multi-ligne (impossible de distinguer la fermeture
  " d'un commentaire multiligne de celle d'un javadoc...
  " elseif ( thisLine =~ '\%(^\s*/\*\*\s*$\)\|{' )
  elseif ( thisLine =~ '\%(^\s*/\*\)\|{' )
    return "a1"
  endif
  return '='
endfunction

augroup filetypedetect
 	" au BufRead,BufNewFile *.java setlocal foldexpr=JavaFold(v:lnum)
 	" au BufRead,BufNewFile *.java setlocal foldmethod=expr
 	" au BufRead,BufNewFile *.java setlocal foldmethod=marker
 	" au BufRead,BufNewFile *.java setlocal foldmarker={,}
 	"au BufRead,BufNewFile *.java setlocal foldmethod=syntax
augroup END
autocmd FileType java setlocal foldmethod=syntax
"}}}

" TODO: buggé
function! XMLFold( lineNumber )
  let thisLine = getline( a:lineNumber )
  if ( thisLine =~ '\%(<.*/>\)' )
    return '='
  "if ( thisLine =~ '\%(<.*>.*</\)' )
  "    return '='
  elseif ( thisLine =~ '\%(^\s*<!\)' )
	return '='
  elseif ( thisLine =~ '\%(^\s*<?\)' )
	return '='
  elseif ( thisLine =~ '\%(</\)' )
    return "s1"
  elseif ( thisLine =~ '\%(<\)' )
    return "a1"
  endif
  return '='
endfunction

" autocmd FileType xml setlocal foldexpr=XMLFold(v:lnum)
" autocmd FileType xml setlocal foldmethod=expr

function! LatexFold( lineNumber )
  let thisLine = getline( a:lineNumber )
  elseif ( thisLine =~ '\%(\\begin\)' )
    return "s1"
elseif ( thisLine =~ '\%(\\end\)' )
    return "a1"
  endif
  return '='
endfunction

autocmd FileType latex setlocal foldexpr=LatexFold(v:lnum)
" par défaut, marqueurs. setlocal foldmethod=expr pour activer.
" + spell en dehors de l'environnement document:
autocmd FileType latex setlocal spell
autocmd FileType latex syntax spell toplevel 
autocmd FileType latex setlocal ts=2
autocmd FileType latex setlocal sw=2
" change the anoying mapping of é to \item
autocmd FileType latex imap <buffer> <leader>it <Plug>Tex_InsertItemOnThisLine
" do not use the fold of latexsuite, the "refresh" does not seem to work...
autocmd FileType latex setlocal nofoldenable

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" minibuffer ("onglets" pour les buffers): ctrl+hjkl pour changer
" desinstalé
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:miniBufExplMapWindowNavVim = 1
" vertical, largeur 20
" let g:miniBufExplVSplit = 20
" F9 pour afficher/masquer explorateur
" nnoremap <silent> <F9> :TMiniBufExplorer<CR>
" pour éviter d'ouvrir les fichiers dans une fenetre d'explorateur
" (TagExplorer), et plus généralement dans les fenetres de buffers non
" modifiables.
" XXX: la multiplication des explorateurs marche assez mal!
" let g:miniBufExplModSelTarget = 1

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" mouvements
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoremap <C-j> <C-W>j
cnoremap <C-k> <C-W>k
cnoremap <C-h> <C-W>h
cnoremap <C-l> <C-W>l

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" eclim
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType tree set foldcolumn=0
nnoremap <silent> <F10> :ProjectsTree<CR>

augroup filetypedetect
	" imports
 	au BufRead,BufNewFile *.java nnoremap <silent> <buffer> <leader>i :JavaImportOrganize<cr>
	" chercher la source ou la doc de l'element sous le curseur
	au BufRead,BufNewFile *.java nnoremap <silent> <buffer> <cr> :JavaSearchContext<cr>
	au BufRead,BufNewFile *.java nnoremap <silent> <buffer> <leader>d :JavaDocSearch -x declarations<cr>
	" browser de buffers
	au BufRead,BufNewFile *.java nnoremap <silent> <buffer> <leader>b :exe ":silent! Buffers"<cr>
	" ouvre une fenetre de recherche de fichier
	au BufRead,BufNewFile *.java nnoremap <silent> <buffer> <leader>l :LocateFile<cr>
	" suggestions de corrections
	au BufRead,BufNewFile *.java nnoremap <silent> <buffer> <leader>c :JavaCorrect<cr>
augroup END

let g:EclimMakeLCD = 1
let g:EclimJavaImportPackageSeparationLevel = 2

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" definition des templates
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
source ~/.vimtemplates

" affichage:
set linebreak 		" wrap lines between words, without EOL insertion
" set showbreak=\~\~\~\>\ \ 
set showbreak=\|\ 

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" mise a jour automatique: taper ":checkt[ime]" pour recharger
" ou leader-r
set autoread
nnoremap <leader>r :checktime<cr>

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" latex suite: environnements
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:Tex_Env_frame = "\\begin{frame}{<+ title +>}\<CR><+ content +>\<CR>\\end{frame}<++>\<CR>"

" afficher les fins de lignes en très pâle dans les fichiers bâtards
match Ignore /\r$/

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CRAN R
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let vimrplugin_assign=0

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" markdown
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufRead,BufNewFile *.md set spell
