set nocompatible

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle config
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype off                  " required

" Needs Vundle to be installed:
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/.vim/vundleplugins')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" end Vundle config
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
" set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
 au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
   \| exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" definition de la touche "leader"
let mapleader = ","


" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
"set noignorecase	" case sensitive search
set autowrite		" Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes) in terminals

"ajouts personnels
set autoindent		"si ca c'est pas explicite...
set nu			"numéroter les lignes: :set nonu dans vim pour les masquer.
set ts=4		"tabstop: largeur des tabulations: 4 espaces
set sw=4		"shiftwidth: largeur de l'auto-indentation (mettre la même que tabstop)
set scrolloff=3	"keep 3 lines visible over and below the cursor

set autoread	" lire automatiquement si fichier modifié par l'exterieur
" autoread un peu merdique (quasiment jamais appelé): forcer un peu les checks
au BufEnter,CursorMoved,CursorHold,InsertEnter * checktime

set laststatus=2	"barre d'etat: 0 jamais, 1 si plusieurs fenetre, 2 toujours
" Format the statusline
" set statusline=%F%m\ %r\ Line:%l\/%L,%c\ %p%%
set statusline=%F%m%r%h%w\ [Format=%{&ff}]\ [FileType=%Y]\ %=[Pos=%01.4l,%01.4v]\ [%p%%]\ [Lines=%L]

set infercase 		"case sensitive autocompletion (crtl-d)
set wildmenu		"menu pour la completion
set wildmode=longest,list

"correction orthographique lors d'edition de fichiers .tex
 augroup filetypedetect
 au BufNewFile,BufRead *.tex setlocal spell "spelllang=fr
 augroup END

" Don't redraw while executing macros (good performance config)
set lazyredraw
 
" surligner en rouge hideux les dépassements de 80 caracteres
" pour les types voulus seulement
" augroup filetypedetect
" 	au BufWinEnter *.m let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.py let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.r let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.R let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.h let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.c let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.cpp let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.nc let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" 	au BufWinEnter *.java let w:m1=matchadd('CursorLine', '\%>80v.\+', -1)
" augroup END

" redefinition du SpellBad (erreur d'orthographe/syntaxe)
highlight SpellBad term=underline cterm=underline ctermbg=none
"augroup filetypedetect
"au BufWinEnter *.py highlight SpellBad term=underline cterm=underline ctermbg=none
"augroup END

" assez explicite...
" TODO: adapter au type de fichier
" definir foldmethod=syntax pour langages à balises
" setlocal foldmethod=indent
" nombre de colonnes sur le coté mettant en évidence les folds
" setlocal foldmethod=syntax
set foldcolumn=4


" sauver les parametres de "vue" d'un fichier (folds manuels, filetype...)
" au BufWinLeave * silent mkview
" au BufWinEnter * silent loadview

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AUTOCOMPLETION
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" supertab permet la completion avec la touche tab: la touche œ est
" remappée vers le caractère tab en mode insert, et tout le monde est content
inoremap § <tab>
" laisser supertab décider du type d'autocompletion:
"let g:SuperTabDefaultCompletionType = "context"
"let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
"set ofu=syntaxcomplete#Complete 	" pour permettre "omnicompletion" (en fonction du language)
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType python let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

autocmd FileType java let g:SuperTabDefaultCompletionType = "<c-x><c-u>"

" autocmd FileType java setlocal completefunc=javacomplete#CompleteParamsInfo 
" autocmd FileType java setlocal omnifunc=javacomplete#Complete
" autocmd FileType java let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

set completeopt=longest,menuone ",preview		" plutot que de completer tout le mot, ne complete que la plus longue chaine commune
											" menu s'affiche même si que 1 proposition
											" documentation si dispo
" selection d'une proposition par entrée:
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" syntaxe nesc
augroup filetypedetect
  au! BufRead,BufNewFile *.nc setfiletype nc
augroup END

" utiliser le folding par marqueurs pour les fichiers tex
" augroup filetypedetect
" 	au BufRead,BufNewFile *.tex set foldmethod=marker
" augroup END

" utiliser un faux syntaxfold pour java
" augroup filetypedetect
" 	au BufRead,BufNewFile *.java set foldmethod=marker foldmarker={,}
" augroup END

" autocmd FileType xml setlocal foldexpr=XMLFold(v:lnum)
" autocmd FileType xml setlocal foldmethod=expr

function! LatexFold( lineNumber )
  let thisLine = getline( a:lineNumber )
  elseif ( thisLine =~ '\%(\\begin\)' )
    return "s1"
elseif ( thisLine =~ '\%(\\end\)' )
    return "a1"
  endif
  return '='
endfunction

autocmd FileType latex setlocal foldexpr=LatexFold(v:lnum)
" par défaut, marqueurs. setlocal foldmethod=expr pour activer.
" + spell en dehors de l'environnement document:
autocmd FileType latex setlocal spell
autocmd FileType latex syntax spell toplevel 
autocmd FileType latex setlocal ts=2
autocmd FileType latex setlocal sw=2
" change the anoying mapping of é to \item
autocmd FileType latex imap <buffer> <leader>it <Plug>Tex_InsertItemOnThisLine
" do not use the fold of latexsuite, the "refresh" does not seem to work...
autocmd FileType latex setlocal nofoldenable

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" minibuffer ("onglets" pour les buffers): ctrl+hjkl pour changer
" desinstalé
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:miniBufExplMapWindowNavVim = 1
" vertical, largeur 20
" let g:miniBufExplVSplit = 20
" F9 pour afficher/masquer explorateur
" nnoremap <silent> <F9> :TMiniBufExplorer<CR>
" pour éviter d'ouvrir les fichiers dans une fenetre d'explorateur
" (TagExplorer), et plus généralement dans les fenetres de buffers non
" modifiables.
" XXX: la multiplication des explorateurs marche assez mal!
" let g:miniBufExplModSelTarget = 1

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" mouvements
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoremap <C-j> <C-W>j
cnoremap <C-k> <C-W>k
cnoremap <C-h> <C-W>h
cnoremap <C-l> <C-W>l

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" eclim
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType tree set foldcolumn=0
nnoremap <silent> <F10> :ProjectsTree<CR>

augroup filetypedetect
	" imports
 	au BufRead,BufNewFile *.java nnoremap <silent> <buffer> <leader>i :JavaImportOrganize<cr>
	" chercher la source ou la doc de l'element sous le curseur
	au BufRead,BufNewFile *.java nnoremap <silent> <buffer> <cr> :JavaSearchContext<cr>
	au BufRead,BufNewFile *.java nnoremap <silent> <buffer> <leader>d :JavaDocSearch -x declarations<cr>
	" browser de buffers
	au BufRead,BufNewFile *.java nnoremap <silent> <buffer> <leader>b :exe ":silent! Buffers"<cr>
	" ouvre une fenetre de recherche de fichier
	au BufRead,BufNewFile *.java nnoremap <silent> <buffer> <leader>l :LocateFile<cr>
	" suggestions de corrections
	au BufRead,BufNewFile *.java nnoremap <silent> <buffer> <leader>c :JavaCorrect<cr>
augroup END

let g:EclimMakeLCD = 1
let g:EclimJavaImportPackageSeparationLevel = 2

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" definition des templates
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" source ~/.vimtemplates

" affichage:
set linebreak 		" wrap lines between words, without EOL insertion
" set showbreak=\~\~\~\>\ \ 
set showbreak=\|\ 

" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" mise a jour automatique: taper ":checkt[ime]" pour recharger
" ou leader-r
set autoread
nnoremap <leader>r :checktime<cr>

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" latex suite: environnements
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:Tex_Env_frame = "\\begin{frame}{<+ title +>}\<CR><+ content +>\<CR>\\end{frame}<++>\<CR>"

" afficher les fins de lignes en très pâle dans les fichiers bâtards
match Ignore /\r$/

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CRAN R
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let vimrplugin_assign=0

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" markdown
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufRead,BufNewFile *.md set spell
